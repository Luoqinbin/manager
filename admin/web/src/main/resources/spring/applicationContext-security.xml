<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-4.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
" default-autowire="byName">
    <!-- 启用注解 -->
    <context:annotation-config/>
    <!-- 配置不过滤的资源（静态资源及登录相关） -->
    <sec:http pattern="/**/*.css" security="none"></sec:http>
    <sec:http pattern="/**/*.jpg" security="none"></sec:http>
    <sec:http pattern="/**/*.jpeg" security="none"></sec:http>
    <sec:http pattern="/**/*.gif" security="none"></sec:http>
    <sec:http pattern="/**/*.png" security="none"></sec:http>
    <sec:http pattern="/**/*.js" security="none"></sec:http>

    <sec:http pattern="/static/**" security="none"></sec:http>
    <sec:http pattern="/ueditor/**" security="none"></sec:http>
    <sec:http pattern="/druid/**" security="none"></sec:http>
    <sec:http pattern="/errors/**" security="none"></sec:http>
    <sec:http pattern="/image/**" security="none"></sec:http>
    <sec:http pattern="/favicon.ico" security="none"></sec:http>
    <sec:http auto-config="true" access-decision-manager-ref="accessDecisionManager"
              entry-point-ref="loginAuthenticationEntryPoint">
        <sec:headers defaults-disabled="true">
            <sec:cache-control/>
        </sec:headers>
        <sec:logout invalidate-session="true" logout-url="/login/logout" success-handler-ref="logoutSuccessHandler"/>

        <sec:form-login login-page="/login/doLogin" default-target-url="/login/doLogin"
                        login-processing-url="/login.do"
                        username-parameter="username"
                        password-parameter="password"
                        authentication-failure-url="/login/doLogin?error=true"
                        authentication-success-handler-ref="authenticationSuccessHandler"/>

        <sec:access-denied-handler ref="accessDeniedHandler"/>

        <sec:session-management session-authentication-strategy-ref="concurrentSessionControlStrategy"/>

        <sec:custom-filter ref="filterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR"/>
        <sec:custom-filter ref="concurrencyFilter" position="CONCURRENT_SESSION_FILTER"/>
    </sec:http>

    <!-- 注销成功 -->
    <bean id="logoutSuccessHandler" class="com.badminton.security.CustomLogoutSuccessHandler">
        <property name="defaultTargetUrl" value="/login/doLogin"></property>
    </bean>

    <!---登录-->
    <bean id="authenticationSuccessHandler" class="com.badminton.security.SimpleLoginSuccessHandler">
        <property name="defaultTargetUrl" value="/index/main.do"></property>
        <property name="forwardToDestination" value="false"></property>
    </bean>

    <!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性。  -->
    <bean id="filterSecurityInterceptor"
          class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="accessDecisionManager" ref="accessDecisionManager"/>
        <property name="securityMetadataSource" ref="securityMetadataSource"/>
    </bean>
    <!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源。 -->
    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <constructor-arg name="decisionVoters">
            <list>
                <ref bean="roleVoter"/>
                <ref bean="authenticatedVoter"/>
            </list>
        </constructor-arg>
    </bean>
    <bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter">
        <property name="rolePrefix" value=""></property>
    </bean>
    <bean id="authenticatedVoter" class="org.springframework.security.access.vote.AuthenticatedVoter"/>

    <!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色去访问。 -->
    <bean id="securityMetadataSource" class="com.badminton.security.SecurityMetadataSourceService"/>

    <!-- 用户的密码加密或解密 -->
    <bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>

    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider ref="authenticationProvider"/>
    </sec:authentication-manager>

    <bean id="authenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <property name="userDetailsService" ref="defaultUserDetailsService"/>
        <property name="userCache" ref="userCache"/>
        <property name="passwordEncoder" ref="passwordEncoder"/>
        <property name="saltSource" ref="saltSource"/>
    </bean>

    <bean class="org.springframework.security.authentication.event.LoggerListener"/>

    <bean id="defaultUserDetailsService" class="com.badminton.security.DefaultUserDetailsService"/>

    <bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
        <property name="userPropertyToUse" value="username"/>
    </bean>

    <bean id="userCache" class="org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache">
        <property name="cache" ref="userEhCache"/>
    </bean>

    <bean id="userEhCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
        <property name="cacheName" value="userCache"/>
        <property name="cacheManager" ref="cacheManager"/>
    </bean>
    <!-- 缓存用户管理 -->
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"/>

    <bean id="loginAuthenticationEntryPoint" class="com.badminton.security.LoginAuthenticationEntryPoint">
        <constructor-arg value="/login/doLogin"/>
        <property name="useForward" value="true"/>
    </bean>
    <bean id="accessDeniedHandler" class="com.badminton.security.RequestAccessDeniedHandler">
        <property name="errorPage" value="/403.jsp"></property>
    </bean>

    <bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
        <constructor-arg name="sessionRegistry" ref="sessionRegistry"/>
        <constructor-arg name="expiredUrl" value="/sessionOut.jsp"/>
    </bean>

    <bean id="concurrentSessionControlStrategy"
          class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
        <constructor-arg name="sessionRegistry" ref="sessionRegistry"/>
        <property name="maximumSessions" value="1"></property>
        <property name="exceptionIfMaximumExceeded" value="true"></property>
    </bean>

    <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"/>

    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <list>
                <value>messages/message</value>
                <value>org/springframework/security/messages</value>
            </list>
        </property>
    </bean>

</beans>